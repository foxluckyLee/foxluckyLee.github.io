<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>promise</title>
    <link href="/2023/07/15/promise/"/>
    <url>/2023/07/15/promise/</url>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>Promise 是异步编程的一种解决方案，它解决异步 回调地狱 的问题。</p><h5 id="回调地狱：一个回调函数嵌套另外一个回调函数，多个嵌套会形成回调地狱的问题"><a href="#回调地狱：一个回调函数嵌套另外一个回调函数，多个嵌套会形成回调地狱的问题" class="headerlink" title="回调地狱：一个回调函数嵌套另外一个回调函数，多个嵌套会形成回调地狱的问题"></a>回调地狱：一个回调函数嵌套另外一个回调函数，多个嵌套会形成回调地狱的问题</h5><p>比如我们发送三个 ajax 请求</p><ul><li><p>第一个正常发送</p></li><li><p>第二个请求需要第一个请求的结果中的某一个值作为参数</p></li><li><p>第三个请求需要第二个请求的结果中的某一个值作为参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;我是第一个请求&#x27;</span>,<br>success (res) &#123;<br><span class="hljs-comment">// 现在发送第二个请求</span><br><span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;我是第二个请求&#x27;</span>，<br><span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">a</span>: res.<span class="hljs-property">a</span>, <span class="hljs-attr">b</span>: res.<span class="hljs-property">b</span> &#125;,<br>success (res2) &#123;<br><span class="hljs-comment">// 进行第三个请求</span><br><span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;我是第三个请求&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123; <span class="hljs-attr">a</span>: res2.<span class="hljs-property">a</span>, <span class="hljs-attr">b</span>: res2.<span class="hljs-property">b</span> &#125;,<br>success (res3) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res3)<br>&#125;<br>&#125;)<br>&#125;<br>&#125;)<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><p>回调地狱，其实就是回调函数嵌套过多导致的</p><h5 id="Promise-对象的状态"><a href="#Promise-对象的状态" class="headerlink" title="Promise 对象的状态"></a>Promise 对象的状态</h5><p>Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。</p><pre><code class="hljs">异步操作未完成（pending）异步操作成功（fulfilled）异步操作失败（rejected）</code></pre><p>这三种的状态的变化途径只有两种。</p><pre><code class="hljs">从“未完成”到“成功”从“未完成”到“失败”</code></pre><p>一旦状态发生变化，就不会再发生改变。即 Promise 实例的状态变化只可能发生一次。</p><p>因此，Promise 的最终结果只有两种。</p><pre><code class="hljs">异步操作成功，Promise 实例传回一个值（value），状态变为fulfilled。异步操作失败，Promise 实例抛出一个错误（error），状态变为rejected。</code></pre><h5 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h5><p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2, p3])<br></code></pre></td></tr></table></figure><p>p 的状态由 p1,p2,p3 决定，分成两种情况。</p><p>（1）只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</p><p>（2）只要 p1、p2、p3 之中有一个被 rejected，p 的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</p><h5 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h5><p>Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([p1, p2, p3])<br></code></pre></td></tr></table></figure><p>上面代码中，只要 p1、p2、p3 之中有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http相关</title>
    <link href="/2023/07/15/http%E7%9B%B8%E5%85%B3/"/>
    <url>/2023/07/15/http%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="http-相关"><a href="#http-相关" class="headerlink" title="http 相关"></a>http 相关</h3><h4 id="http-协议"><a href="#http-协议" class="headerlink" title="http 协议"></a>http 协议</h4><p>http 协议：超文本传输协议，从服务器传输文本到本地浏览器的传送协议。基于 TCP/IP 通信协议传递数据。</p><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><ol><li>由 HTTP 客户端发起请求，建立一个到服务器指定端口的 TCP。</li><li>HTTP 服务器在端口监听客户端发送的请求</li><li>服务端收到想客户端发送状态</li><li>客户端收到服务器返回的信息通过浏览器显示在用户的显示屏上，客户机与服务器断开连接</li></ol><h5 id="浏览器输入-URL-之后"><a href="#浏览器输入-URL-之后" class="headerlink" title="浏览器输入 URL 之后"></a>浏览器输入 URL 之后</h5><ol><li>输入之后，查询本地 IP 缓存，没有进行 DSN 查询，解析 IP</li><li>进行 TCP 三次握手</li><li>发起 http 请求</li><li>客户端接收数据，并渲染</li><li>关闭连接</li></ol><h4 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a>三次握手四次挥手</h4><p>三次握手和四次挥手之间就是 TCP 通信的连接与断开</p><p>三次握手：</p><p>​ 第一次握手： 客 发送 SYN 包 的数据包给服务端</p><p>​ 第二次握手： 服收 发送 SYN/ACK 的数据包，说我得到了</p><p>​ 第三次握手：客户端回传带有 ACK 的数据包 ，说结束了</p><p>四次挥手：</p><p>​ 第一次挥手：客户 发送 FIN 包 ，用来关闭客户端到服务端的数据传送 ，客户 进入 FIN_WAIT_1 状态</p><p>​ 第二次挥手：服务 收到 FIN ， 发送 ACK 给 客户，确认序号为收到序号+1 ，服务端进入到 CLOSE_WAIT 状态</p><p>​ 第三次挥手：服务 发送 FIN ，用来关闭服务端到客户端之间的数据传送，服务端进入 LAST_ACK 状态</p><p>​ 第四次挥手：客户 收到 FIN , 客户进入 TIME_WAIT 状态，发送 ACK 给 Server, 确认序号 +1， 服务端进入 CLOSE 状态</p><p>​</p><p>三次握手：</p><p>​ 客户端 ： 我喜欢你，我们在一起吧 。 好呀！：服务端</p><p>​ 客户端 ： 真的吗我很高兴</p><p>四次挥手：</p><p>​ 客户端 ： 我们该结束了 。（厌倦了） 渣男！：服务端</p><p>​ （客户端 ==冷暴力== 等待变成单身） 分手！：服务端</p><p>​ 客户端 ： 再见（恢复单身）</p><p>​</p><h4 id="xxs-和-csrf-攻击"><a href="#xxs-和-csrf-攻击" class="headerlink" title="xxs 和 csrf 攻击"></a>xxs 和 csrf 攻击</h4><table><thead><tr><th>xxs（跨站脚本攻击）</th><th>csrf（跨站点网站请求）</th></tr></thead><tbody><tr><td>在 web 页面中注入一些恶意的 script 标签</td><td>在用户登录之后，通过第三方网站获取用户的登陆凭证，避免进入网站之后进行用户验证</td></tr><tr><td>img / iframe 中的 src 不为空 ； 代码转译</td><td>通过登录验证，异地登陆需要验证码 ; 尽量使用 post 请求</td></tr><tr><td>反射型，存储型</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现数组去重的方法</title>
    <link href="/2023/05/19/%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/05/19/%E5%AE%9E%E7%8E%B0%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="实现数组去重的方法"><a href="#实现数组去重的方法" class="headerlink" title="实现数组去重的方法"></a>实现数组去重的方法</h1><h4 id="1、set"><a href="#1、set" class="headerlink" title="1、set"></a>1、set</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">repalit</span><span class="hljs-params">(arr)</span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">set</span>(arr)<br>    <span class="hljs-keyword">return</span> [...a]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、indexof-数组下标为-1-的-push-进去"><a href="#2、indexof-数组下标为-1-的-push-进去" class="headerlink" title="2、indexof (数组下标为-1 的 push 进去)"></a>2、indexof (数组下标为-1 的 push 进去)</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-number">1</span>、使用 forEach<br><br>let newArr = []<br>arr.forEach(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">if</span>(newArr.<span class="hljs-built_in">indexof</span>(item) === <span class="hljs-number">-1</span>)&#123;<br>        newArr.<span class="hljs-built_in">push</span>(item)<br>    &#125;<br>&#125;)<br><br><br><span class="hljs-number">2</span>、使用<span class="hljs-built_in">reduce</span><br> let newArr = arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">cur,arr</span>)=&gt;</span>&#123;<br>     <span class="hljs-keyword">if</span>(cur.<span class="hljs-built_in">indexof</span>(cur) ===  <span class="hljs-number">-1</span> )&#123;<br>         cur.<span class="hljs-built_in">push</span>(cur)<br>     &#125;<br>     <span class="hljs-keyword">return</span> cur<br> &#125;,[])<br><br><span class="hljs-number">3</span>、使用<span class="hljs-built_in">filter</span>()<br>const newArr = arr.<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item,index,self</span>)&#123;<br>    <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">indexof</span>(item) === index<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3、includes-用-reduce-做累加计算"><a href="#3、includes-用-reduce-做累加计算" class="headerlink" title="3、includes 用 reduce 做累加计算"></a>3、includes 用 reduce 做累加计算</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haxe">const <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span> = arr.reduce((<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>,index) =&gt; &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.includes(index))&#123;<br>        <span class="hljs-keyword">new</span><span class="hljs-type">Arr</span>.push(item)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="4、双-for-＋-splice"><a href="#4、双-for-＋-splice" class="headerlink" title="4、双 for ＋ splice"></a>4、双 for ＋ splice</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scss">let<br><span class="hljs-built_in">for</span>(let i = <span class="hljs-number">0</span> ; i &lt; arr.length ; i ++)&#123;<br>    <span class="hljs-built_in">for</span>( let j  = i+ <span class="hljs-number">1</span> ; i&lt; arr.length ; j++)&#123;<br>        <span class="hljs-built_in">if</span>(arr[i] == arr[j])&#123;<br>            arr<span class="hljs-selector-class">.splice</span>(i , <span class="hljs-number">1</span>)<br>            <span class="hljs-selector-tag">i</span>--<br>            j--<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue2和vue3配置proxy代理</title>
    <link href="/2023/04/25/vue2%E5%92%8Cvue3%E9%85%8D%E7%BD%AEproxy%E4%BB%A3%E7%90%86/"/>
    <url>/2023/04/25/vue2%E5%92%8Cvue3%E9%85%8D%E7%BD%AEproxy%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="vue2-和-vue3-配置-proxy-代理"><a href="#vue2-和-vue3-配置-proxy-代理" class="headerlink" title="vue2 和 vue3 配置 proxy 代理"></a>vue2 和 vue3 配置 proxy 代理</h1><h3 id="vue2-配置-proxy-代理"><a href="#vue2-配置-proxy-代理" class="headerlink" title="vue2 配置 proxy 代理"></a>vue2 配置 proxy 代理</h3><ol><li><p>在 vue.config.js，devServe 配置 proxy 代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">proxy</span>:&#123;<br>    [process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_URL</span>]:&#123;<br>     <span class="hljs-comment">//taget+真实地址</span><br>        <span class="hljs-attr">taeget</span>:process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_TARGET</span>,<br>            <span class="hljs-attr">pathRewrite</span>:&#123;<br>                [<span class="hljs-string">&#x27;^&#x27;</span>+process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_URL</span>]:<span class="hljs-string">&#x27;&#x27;</span><br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="vue3-配置代理"><a href="#vue3-配置代理" class="headerlink" title="vue3 配置代理"></a>vue3 配置代理</h3><p>1.再 vite.config.ts,server 中配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-attr">proxy</span>:&#123;<br>    <span class="hljs-string">&#x27;/api&#x27;</span>:&#123;<br>        env.<span class="hljs-property">VITE_APP_TARGET_API</span>,<br>          <span class="hljs-attr">rewrite</span>:<span class="hljs-function">(<span class="hljs-params">path</span>)=&gt;</span>path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>,<span class="hljs-string">&#x27;&#x27;</span>),<br>              <span class="hljs-attr">secure</span>:<span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于Hexo的网站搭建</title>
    <link href="/2023/04/21/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/04/21/%E5%9F%BA%E4%BA%8EHexo%E7%9A%84%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="基于-Hexo-的网站搭建"><a href="#基于-Hexo-的网站搭建" class="headerlink" title="基于 Hexo 的网站搭建"></a>基于 Hexo 的网站搭建</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>软件的下载： 安装路径下的文件夹建议全英文</p><br><h2 id="2-下载的软件"><a href="#2-下载的软件" class="headerlink" title="2.下载的软件"></a>2.下载的软件</h2><p>Node.js 和 github 在选择了安装文件夹后 一路下一步</p><h3 id="（1）-Git-工具-的下载"><a href="#（1）-Git-工具-的下载" class="headerlink" title="（1） Git 工具 的下载"></a>（1） Git 工具 的下载</h3><p>Git 官网下载：<a href="https://git-scm.com/">https://git-scm.com/</a><br></p><p>国内镜像下载：<a href="https://npm.taobao.org/mirrors/git-for-windows/v2.22.0.windows.1/Git-2.22.0-64-bit.exe">https://npm.taobao.org/mirrors/git-for-windows/v2.22.0.windows.1/Git-2.22.0-64-bit.exe</a><br></p><p>国内其他版本下载：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a><br></p><p>建议使用国内镜像下载，速度最快！<br></p><p>下载后请自行安装</p><h3 id="（2）-node-js-的下载"><a href="#（2）-node-js-的下载" class="headerlink" title="（2） node.js 的下载"></a>（2） node.js 的下载</h3><p>您需要安装 node.js 才能使用和安装 hexo 博客，无论是使用和不使用本脚本，都是必须安装的，下载地址：</p><p><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><h3 id="node-js-环境配置"><a href="#node-js-环境配置" class="headerlink" title="node.js 环境配置"></a>node.js 环境配置</h3><p>先看文档和视频，看了一遍再配<br></p><p>观看文档地址 ：<a href="https://blog.csdn.net/qq_43285335/article/details/90696126">https://blog.csdn.net/qq_43285335/article/details/90696126</a><br></p><p>观看视频地址：直接观看 up 主 p2 集第六分钟：<a href="https://www.bilibili.com/video/BV1Rt4y1k7it?p=2&">https://www.bilibili.com/video/BV1Rt4y1k7it?p=2&amp;</a><br></p><h3 id="（3）网易-UU-加速器的下载"><a href="#（3）网易-UU-加速器的下载" class="headerlink" title="（3）网易 UU 加速器的下载"></a>（3）网易 UU 加速器的下载</h3><p>访问国外网站速度较慢，建议下载加速器，注意：不用的时候请关掉，节约资源<br></p><p>下载地址：<a href="https://uu.163.com/">https://uu.163.com/</a><br></p><h2 id="3-github-账号注册"><a href="#3-github-账号注册" class="headerlink" title="3.github 账号注册"></a>3.github 账号注册</h2><p>直接观看 up 主 p2 集：<a href="https://www.bilibili.com/video/BV1Rt4y1k7it?p=2&vd_source=9fe38ec85a281226e622d7dd5456a3b2">https://www.bilibili.com/video/BV1Rt4y1k7it?p=2&amp;vd_source=9fe38ec85a281226e622d7dd5456a3b2</a></p><br><h2 id="4-下载-hexo-script-的安装脚本"><a href="#4-下载-hexo-script-的安装脚本" class="headerlink" title="4.下载[hexo-script]的安装脚本"></a>4.下载[hexo-script]的安装脚本</h2><p>先在 D 盘或者 E 盘创建一个 myblog 文件夹</p><p>在[myblog]文件夹,然后在此文件夹下右键打开 git bash，</p><p><br>参考文档时注意看是在哪个文件夹下打开 git bash，</p><p>下载安装过程参考文档：</p><p><a href="https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/zhun-bei-gong-ju">https://hexoscript.gitbook.io/hexo-script/v/1.3-1/shi-yong-bu-zhou/zhun-bei-gong-ju</a></p><p>注：配置完成后 记得完成命令</p><p>hexo g 生成网站静态文件到默认设置的 public 文件夹。<br></p><p>hexo s   启动本地服务器，用于预览主题。默认地址： <a href="http://localhost:4000/">http://localhost:4000/</a><br></p><p>hexo d   自动生成网站静态文件，并部署到设定的仓库<br></p><br><h2 id="5-主题的配置"><a href="#5-主题的配置" class="headerlink" title="5.主题的配置"></a>5.主题的配置</h2><p>参考文档 ：<a href="https://blog.csdn.net/jspnetcn/article/details/104111651">https://blog.csdn.net/jspnetcn/article/details/104111651</a><br></p><p>参考视频主题配置：<a href="https://www.bilibili.com/video/BV1Rt4y1k7it?p=2&">https://www.bilibili.com/video/BV1Rt4y1k7it?p=2&amp;</a><br></p><br><h2 id="6-文章撰写"><a href="#6-文章撰写" class="headerlink" title="6.文章撰写"></a>6.文章撰写</h2><p>用 vscode 、typora</p><p><a href="https://cloud.tencent.com/developer/article/1662733">https://cloud.tencent.com/developer/article/1662733</a></p><br><p>typora 安装包 链接：<a href="https://pan.baidu.com/s/1YEGYa8TGk8cgX0ZCVRfJlQ?pwd=zsi0">https://pan.baidu.com/s/1YEGYa8TGk8cgX0ZCVRfJlQ?pwd=zsi0</a></p><p>提取码：zsi0</p><br><h2 id="7-常用命令"><a href="#7-常用命令" class="headerlink" title="7.常用命令"></a>7.常用命令</h2><p><a href="https://blog.csdn.net/dxxzst/article/details/76135935">https://blog.csdn.net/dxxzst/article/details/76135935</a></p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
